# Payroll Application

This README provides detailed instructions to set up and run the **Payroll Application**, which is built as a Class Library. The application integrates with an Acumatica ERP instance via a REST API. Please ensure you follow the steps below to configure and run the application on your machine.

## Prerequisites

1. **Acumatica Framework**:
   - Ensure the Acumatica Framework is installed and properly configured on your system.
   - You must create a new instance of Acumatica (e.g., `PayrollFrameworkDB`).

2. **Software Requirements**:
   - Visual Studio 2022 or higher.
   - IIS (Internet Information Services) with `Application Development` and `Common HTTP Features` installed.
   - .NET Framework Development Pack installed.
   - SQL Server or SQL Server Express.

3. **Acumatica Instance Configuration**:
   - Configure a local Acumatica instance with:
     - Instance URL: `http://localhost:<port>/YourInstance/`
     - Database: Local SQL database linked to the instance.

4. **Dependencies**:
   - Add the required NuGet packages in the solution:
     - `RestSharp` (used for REST API interactions).
     - `Newtonsoft.Json` (used for JSON serialization/deserialization).

## Project Structure

The project is built as a **Class Library** and contains the following key components:

- **Models**: Defines the structure for payroll data.
- **Graphs**: Contains the main business logic for processing payroll entries.
- **Extensions**: Utility methods and extensions for additional calculations.
- **Views**: ASPX pages for UI components.
- **Program.cs**: Entry point containing the REST API connection logic.

## Setup Instructions

### Step 1: Clone the Repository

1. Clone the repository to your local machine:
   ```bash
   git clone <repository-url>
   ```
2. Open the solution in Visual Studio.

### Step 2: Set Up the Acumatica Instance

1. **Create a new Acumatica instance** on your local IIS.
2. Update the instance name and port in the `Program.cs` file to match your configuration.
3. Ensure the Acumatica instance is running and accessible via the configured URL.

### Step 3: Update Configuration in `Program.cs`

1. Navigate to `Program.cs` in the solution.
2. Update the following fields:
   ```csharp
   string siteUrl = "http://localhost:<port>/YourInstance/"; // Replace <port> and YourInstance with your Acumatica instance details.
   string username = "admin"; // Replace with Acumatica admin username.
   string password = "password"; // Replace with Acumatica admin password.
   ```

### Step 4: Build the Project

1. Since this is a Class Library project, you cannot run it directly.
2. Build the project to ensure all dependencies are resolved and there are no errors.

### Step 5: Run the Application

To test the application:
1. Deploy the library to the Acumatica instance by copying the DLLs to the `Bin` folder of your Acumatica site.
2. Restart the IIS site to load the new DLLs.
3. Navigate to the Acumatica UI and verify the application functionality.

### Step 6: REST API Testing

You can test the REST API functionality by:
1. Running the code in `Program.cs` to perform REST API calls (e.g., login, CRUD operations).
2. Use tools like Postman to interact with the Acumatica instance directly.

## Notes for Testing by Interviewer

1. **Acumatica Instance Setup**:
   - You will need to create an instance on your local machine with the configurations mentioned above.
   - Update the `Program.cs` file to match your instance details.

2. **Port Differences**:
   - The port for the instance may differ on your system. Ensure the correct port is reflected in the `siteUrl` field in `Program.cs`.

3. **DLL Deployment**:
   - Ensure that the built DLL files are correctly deployed to your Acumatica instance's `Bin` directory.

## Troubleshooting

1. **Class Library Error**:
   - If you encounter the error "A project with an Output Type of Class Library cannot be started directly," ensure you are running the correct executable or deploying to Acumatica.

2. **REST API Connection Issues**:
   - Verify the `siteUrl`, `username`, and `password` fields in `Program.cs`.
   - Ensure the Acumatica instance is running and accessible from your machine.

---

Feel free to reach out if you encounter any issues while setting up or running the application.

Acumatica Configuration Wizard

Instance information

Instance Name: PayrollFrameworkDB
Instance Type: RegularSite
Instance Files Path: C:\Program Files\Acumatica Framework\PayrollFrameworkDB\Site
Database: (localdb)\mssqllocaldb\PayrollFrameworkDB
Database Version: 21.225.0006
Files Version: 21.225.0006
Instance URL: http://localhost:81/PayrollFrameworkDB/
Web Site Name: PayrollDev
Virtual Directory Name: PayrollFrameworkDB

